\input texinfo.tex
@c %**start of header
@setfilename vicare-sqlite.info
@settitle SQLite backend for Vicare Scheme
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      SQLite backend for Vicare Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/SQLite

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-sqlite

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012

@set TESTED_SQLITE_VERSION      3.7.13

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the SQLite
@sql{} database engine.  The last time the maintainer bothered to update
this paragraph, he had tested SQLite Amalgamation version
@value{TESTED_SQLITE_VERSION}.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}

@noindent
the home page of the Vicare project is at:

@center @url{http://marcomaggi.github.com/vicare.html}

@noindent
the home page of SQLite is at:

@center @url{http://www.sqlite.org/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-sqlite: (vicare-sqlite). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain interface to SQLite.

Appendices

* Package License::             @gnu{} General Public License.
* Documentation License::       @gnu{} Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the SQLite @sql{} database engine.  The last time the
maintainer bothered to update this paragraph, he had tested SQLite
Amalgamation version @value{TESTED_SQLITE_VERSION}.

SQLite is a in--process library that implements a self--contained,
serverless, zero--configuration, transactional @sql{} database engine.
The code for SQLite is in the public domain and is thus free for use for
any purpose, commercial or private.

The package installs a C language library implementing wrapper C
functions for the C language SQLite library; on top of this, a set of
Scheme libraries exports an adapted @api{}.  This document contains only
a brief description of the functions: refer to the SQLite's
documentation for details:

@center @url{http://www.sqlite.org/c3ref/intro.html}

The following Scheme libraries are installed:

@table @library
@item vicare databases sqlite3
It exports one binding for each SQLite public function.  All the Scheme
function names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{sqlite3_exec} becomes @func{sqlite3-exec}.

@item vicare databases sqlite unsafe-capi
It exports one syntax binding for each SQLite public function.  All the
Scheme syntax names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{sqlite3_exec} becomes @func{sqlite3-exec}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item vicare databases sqlite constants
It exports one binding for each constant value defined in the C language
header @file{sqlite3.h}.

@item vicare databases sqlite features
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.
@end table

@c page
@node plain
@chapter Plain interface to SQLite


@menu
* plain version::               Version informations.
* plain compile options::       Inspecting SQLite compile options.
* plain connect::               Handling database connections.
* plain errors::                Error codes and error messages.
@end menu

@c page
@node plain version
@section Version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.  The following
bindings are exported by the @library{vicare databases sqlite3} library.


@defun vicare-sqlite3-version-string
Return a string representing the @value{PACKAGE} C library interface
version number, not to be confused with the package version number.
@end defun


@defun vicare-sqlite3-version-interface-current
Return a fixnum representing the @value{PACKAGE} C library interface
current version number.
@end defun


@defun vicare-sqlite3-version-interface-revision
Return an integer representing the @value{PACKAGE} C library interface
current revision number.
@end defun


@defun vicare-sqlite3-version-interface-age
Return an integer representing the @value{PACKAGE} C library interface
current age.
@end defun


@defun sqlite3-libversion
Return a string representing the version number of the SQLite library in
use.
@end defun


@defun sqlite3-sourceid
Return a string representing the source identifier the SQLite library in
use.
@end defun

@c page
@node plain compile options
@section Inspecting SQLite compile options


The following bindings are exported by the @library{vicare databases
sqlite3} library.


@defun sqlite3-compileoption-get @var{option-index}
Return a string representing the name of the SQLite option at
@var{option-index} that was enabled at compile time; if the index is out
of range: return @false{}.

@example
#!r6rs
(import (vicare)
  (vicare databases sqlite3))

(let loop ((i  0)
           (op (sqlite3-compileoption-get 0)))
  (and op
       (begin
         (printf "~a\n" op)
         (let ((i (+ 1 i)))
           (loop i (sqlite3-compileoption-get i))))))
@print{} "CURDIR"
@print{} "ENABLE_FTS3"
@print{} "ENABLE_RTREE"
@print{} "TEMP_STORE=1"
@print{} "THREADSAFE=1"
@end example
@end defun


@defun sqlite3-compileoption-used @var{option-name}
Return @true{} if the SQLite compile option @var{option-name}, which
must be a string, is enabled.

@example
#!r6rs
(import (vicare)
  (vicare databases sqlite3))

(sqlite3-compile-option-used "CURDIR")
@result{} #t
@end example
@end defun


@defun sqlite3-threadsafe
Return @true{} if SQLite was compiled with thread--safe features
enabled.
@end defun

@c page
@node plain connect
@section Handling database connections


The following bindings are exported by the @library{vicare databases
sqlite3} library.


@deftp {Struct Typedef} sqlite3
An opaque Scheme structure holding a reference to a C language type
@code{sqlite3}, it references a connection to a SQLite database.  When
instances of this type are used as arguments to functions: this
documentation identifies them as @var{connection}.

When instances of this type are garbage collected: @func{sqlite3-close}
is automatically applied to them.  This operation may silently fail if
there are SQLite data structures still referencing the connection.
@end deftp


@defun sqlite3? @var{obj}
Return @true{} if @var{obj} is an instance of @code{sqlite3}.
@end defun


@defun sqlite3?/open @var{obj}
Return @true{} if @var{obj} is an instance of @code{sqlite3} and the
connection it represents is open.
@end defun


@defun sqlite3-close @var{connection}
Close the database connection referenced by @var{connection}, which must
be an instance of @code{sqlite3}.  Return an exact integer representing
a @code{SQLITE_} constant.

It is safe to apply multiple times this function to the same
@var{connection}: the first time the connection is closed, the
subsequent times nothing happens and the return value is
@code{SQLITE_OK}.
@end defun


@defun sqlite3-open @var{pathname}
@defunx sqlite3-open16 @var{pathname}
Open a new database connection to the file selected by the
@var{pathname}, which must be a string or bytevector; if successful
return a new instance of @code{sqlite3}, else return a @code{SQLITE_}
constant.

@example
#!r6rs
(import (vicare)
  (vicare databases sqlite3)
  (only (vicare syntactic-extensions)
        unwind-protect))

(let ((conn (sqlite3-open "sqlite.test.db")))
  (unwind-protect
      (sqlite3?/open conn)
    (when (sqlite3? conn)
      (sqlite3-close conn))))
@result{} #t ;if successful
@end example
@end defun


@defun sqlite3-open-v2 @var{pathname} @var{flags}
@defunx sqlite3-open-v2 @var{pathname} @var{flags} @var{vfs-module}
Open a new database connection to the file selected by the
@var{pathname}, which must be a string or bytevector; if successful
return a new instance of @code{sqlite3}, else return a @code{SQLITE_}
constant.

To create a private, temporary, in--memory database we must use
@code{:memory:} as @var{pathname}.

@var{flags} must be an exact integer representing database configuration
flags.  The optional @var{vfs-module} must be @false{} or a string
representing the name of a @acronym{VFS} module; when @false{} or not
given: the default module is used.

@example
#!r6rs
(import (vicare)
  (vicare databases sqlite3)
  (only (vicare syntactic-extensions)
        unwind-protect))

(let ((conn (sqlite3-open-v2 "sqlite.test.db"
                             (fxior SQLITE_OPEN_READWRITE
                                    SQLITE_OPEN_CREATE))))
  (unwind-protect
      (sqlite3?/open conn)
    (when (sqlite3? conn)
      (sqlite3-close conn))))
@result{} #t ;if successful
@end example
@end defun

@c page
@node plain errors
@section Error codes and error messages


The following bindings are exported by the @library{vicare databases
sqlite3} library.


@defun sqlite3-errcode @var{connection}
@defunx sqlite3-extended-errcode @var{connection}
Return an exact integer representing the numeric result code or extended
result code for the most recent failed @code{sqlite3_} @api{} call
associated with a database @var{connection}.
@end defun


@defun sqlite3-errmsg @var{connection}
@defunx sqlite3-errmsg16 @var{connection}
Return an English--language string that describes the error for the most
recent failed @code{sqlite3_} @api{} call associated with a database
@var{connection}, as either @utf{}-8 or @utf{}-16 respectively.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @url{http://marcomaggi.github.com/docs/vicare-sqlite.html}

@noindent
the latest version of this package can be downloaded from:

@center @url{http://github.com/marcomaggi/vicare-sqlite/downloads}

@noindent
development takes place at:

@center @url{http://github.com/marcomaggi/vicare-sqlite/}

@noindent
the home page of the Vicare project is at:

@center @url{http://marcomaggi.github.com/vicare.html}

@noindent
SQLite can be found here:

@center @url{http://www.sqlite.org/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

